<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="C:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form\bin\Release\AscendedMaterialsForm.exe">
   <Modules>
    <Module Name="ascendedmaterialsform.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'AscendedMaterialsForm.exe' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'AscendedMaterialsForm.exe' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="AscendedMaterialsForm">
       <Types>
        <Type Name="API" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="API" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'API' in type name 'API' by changing it to 'Api'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Buys" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'API.Buys' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#id" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="id" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'id' in member name 'API.id' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Sells" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'API.Sells' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="cloth" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#setLabel(System.Windows.Forms.Label,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="material.cs" Line="51">'cloth.setLabel(Label, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Form1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_download_serialized_json_data`1(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="323">Modify 'Form1._download_serialized_json_data&lt;T&gt;(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#calc_cloth()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="171">'Form1.calc_cloth()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#calc_leather()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="199">'Form1.calc_leather()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#calc_metal()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="229">'Form1.calc_metal()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="234">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Form1.calc_metal()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="237">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Form1.calc_metal()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#calc_wood()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="271">'Form1.calc_wood()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#checkNull(System.Int32,System.Int32&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="437">The 'this' parameter (or 'Me' in Visual Basic) of 'Form1.checkNull(int, out int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cloth" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'Form1.cloth' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#createControls()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="464">Method 'Form1.createControls()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Needed".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="461">Method 'Form1.createControls()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Storage".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#createControlsCloth()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="485">Method 'Form1.createControlsCloth()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "+".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="490">Method 'Form1.createControlsCloth()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "-".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#createControlsLeather()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="529">Method 'Form1.createControlsLeather()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "+".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="534">Method 'Form1.createControlsLeather()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "-".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#createControlsMetal()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="573">Method 'Form1.createControlsMetal()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "+".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="578">Method 'Form1.createControlsMetal()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "-".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="611">Method 'Form1.createControlsMetal()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Craft".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#createControlsWood()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="629">Method 'Form1.createControlsWood()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "+".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="634">Method 'Form1.createControlsWood()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "-".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#createLabel(System.Windows.Forms.Label)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="672">The 'this' parameter (or 'Me' in Visual Basic) of 'Form1.createLabel(Label)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#formatAsGold(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Decimal.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="302">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'Form1.formatAsGold(int)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="302">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'Form1.formatAsGold(int)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="302">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'Form1.formatAsGold(int)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getSellPrice(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="307">The 'this' parameter (or 'Me' in Visual Basic) of 'Form1.getSellPrice(int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="307">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Form1.getSellPrice(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitializeComponent()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.Designer.cs" Line="178">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Calc".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.Designer.cs" Line="193">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Load".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.Designer.cs" Line="183">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Reset".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.Designer.cs" Line="188">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Save".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.Designer.cs" Line="342">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Smoke\'s Ascended Mats Calculator".</Issue>
            </Message>
            <Message Id="System.Windows.Forms.FileDialog.set_Filter(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.Designer.cs" Line="200">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'FileDialog.Filter.set(string)'. Retrieve the following string(s) from a resource table instead: "Text file (*.txt)|*.txt".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.Designer.cs" Line="206">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'FileDialog.Filter.set(string)'. Retrieve the following string(s) from a resource table instead: "Text file (*.txt)|*.txt".</Issue>
            </Message>
            <Message Id="Calc" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.Designer.cs" Line="178">Correct the spelling of the unrecognized token 'Calc' in the literal '"Calc"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#leather" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'Form1.leather' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#metal" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'Form1.metal' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#minus(System.Windows.Forms.TextBox)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="849">'Form1.minus(TextBox)' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="849">The 'this' parameter (or 'Me' in Visual Basic) of 'Form1.minus(TextBox)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="855">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Form1.minus(TextBox)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#onChange(System.Windows.Forms.Panel)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="860">The 'this' parameter (or 'Me' in Visual Basic) of 'Form1.onChange(Panel)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#plus(System.Windows.Forms.TextBox)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="869">'Form1.plus(TextBox)' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="869">The 'this' parameter (or 'Me' in Visual Basic) of 'Form1.plus(TextBox)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="871">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Form1.plus(TextBox)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetValue(System.Int32,System.Windows.Forms.Label)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="881">Method 'Form1.SetValue(int, Label)' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: " : ".</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="876">The 'this' parameter (or 'Me' in Visual Basic) of 'Form1.SetValue(int, Label)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Decimal.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="880">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'Form1.SetValue(int, Label)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="880">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'Form1.SetValue(int, Label)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Form1.cs" Line="885">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Form1.SetValue(int, Label)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_cloth_asc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_cloth_asc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="asc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'asc' in member name 'Form1.v_cloth_asc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_cloth_to" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_cloth_to' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_cloth_toc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_cloth_toc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_cloth_tt" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_cloth_tt' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="tt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'tt' in member name 'Form1.v_cloth_tt' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_cloth_ttc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_cloth_ttc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="ttc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'ttc' in member name 'Form1.v_cloth_ttc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_cloth_tw" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_cloth_tw' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="tw" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'tw' in member name 'Form1.v_cloth_tw' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_cloth_twc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_cloth_twc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="twc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'twc' in member name 'Form1.v_cloth_twc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_leather_asc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_leather_asc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="asc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'asc' in member name 'Form1.v_leather_asc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_leather_to" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_leather_to' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_leather_toc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_leather_toc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_leather_tt" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_leather_tt' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="tt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'tt' in member name 'Form1.v_leather_tt' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_leather_ttc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_leather_ttc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="ttc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'ttc' in member name 'Form1.v_leather_ttc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_leather_tw" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_leather_tw' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="tw" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'tw' in member name 'Form1.v_leather_tw' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_leather_twc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_leather_twc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="twc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'twc' in member name 'Form1.v_leather_twc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_metal_ao" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_metal_ao' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="ao" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'ao' in member name 'Form1.v_metal_ao' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_metal_asc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_metal_asc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="asc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'asc' in member name 'Form1.v_metal_asc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_metal_at" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_metal_at' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_metal_to" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_metal_to' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_metal_toc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_metal_toc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_metal_tt" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_metal_tt' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="tt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'tt' in member name 'Form1.v_metal_tt' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_metal_ttc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_metal_ttc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="ttc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'ttc' in member name 'Form1.v_metal_ttc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_metal_tw" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_metal_tw' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="tw" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'tw' in member name 'Form1.v_metal_tw' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_metal_twc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_metal_twc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="twc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'twc' in member name 'Form1.v_metal_twc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_wood_asc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_wood_asc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="asc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'asc' in member name 'Form1.v_wood_asc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_wood_to" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_wood_to' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_wood_toc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_wood_toc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_wood_tt" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_wood_tt' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="tt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'tt' in member name 'Form1.v_wood_tt' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_wood_ttc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_wood_ttc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="ttc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'ttc' in member name 'Form1.v_wood_ttc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_wood_tw" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_wood_tw' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="tw" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'tw' in member name 'Form1.v_wood_tw' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#v_wood_twc" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Form1.v_wood_twc' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="twc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'twc' in member name 'Form1.v_wood_twc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#wood" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'Form1.wood' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="leather" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#setLabel(System.Windows.Forms.Label,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="material.cs" Line="74">'leather.setLabel(Label, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="material" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="material" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'material' in type name 'material' by changing it to 'Material'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#wl" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'material.wl' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;int&gt;' in 'material.wl' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="wl" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'wl' in member name 'material.wl' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="metal" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#setLabel(System.Windows.Forms.Label,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="material.cs" Line="100">'metal.setLabel(Label, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Rounding" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#RoundUp(System.Decimal,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="Rounding.cs" Line="9">'Rounding.RoundUp(decimal, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="wood" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#ids" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'wood.ids' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#setLabel(System.Windows.Forms.Label,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 13:23:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Meins\Coding\Cpp\Asc_Mats_Form\Asc_Mats_Form" File="material.cs" Line="123">'wood.setLabel(Label, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806">
   <Name>Do not ignore method results</Name>
   <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
   <Resolution Name="TryParse">{0} calls {1} but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182273.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="MemberAbbreviation">Correct the casing of '{0}' in member name {1} by changing it to '{2}'. '{2}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
